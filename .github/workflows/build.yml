# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Create and publish a Docker image

on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG_NAME: latest
  DOMAIN_NAME: ${{ github.repository_owner }}-${{ github.ref_name }}.apps.holyham.cloud

jobs:
  build-and-push-image:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in
        run: docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
           docker build \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: Push
        if: github.ref == 'refs/heads/main'
        run: docker push -a ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Cleanup
        run: |
          docker logout
          docker system prune -a -f

  # test:
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: test
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   container:
  #     image: node
  #   steps:
  #   - name: Checkout repo
  #     uses: actions/checkout@v3
  #   - name: Install
  #     run: npm ci
  #   - name: Build
  #     run: npm run build
  #   - name: Run tests
  #     run: npm test
  #     env:
  #       DATABASE_URL: "postgres://postgres:postgres@postgres:5432/test"
  #       DATABASE_PASSWORD: postgres
  #   # - name: Lint
  #   #   run: npm lint

  deploy:
    if: github.ref == 'refs/heads/main'
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
      # - test
    steps:
    - uses: actions/checkout@v3
    - name: Replace old image with new image
      run: |
        sed -i "s|image: ghcr.io/jsaady/noter:.*|image: ghcr.io/jsaady/noter:${{ env.TAG_NAME }}|g" ./deployment/k8s.yaml
    - name: Push to repo
      run: |
        git config --global user.email "john@holyham.cloud"
        git config --global user.name "John Saady"
        git add ./deployment/k8s.yaml
        git commit -m "Update image tag to ${{ env.TAG_NAME }} [skip ci]"
        git push
    # - name: Extract env vars
    #   uses: jsaady/actions/extract-env-vars@main
    #   env:
    #     APP_SECRET_ENVIRONMENT_URL: ${{ secrets.APP_SECRET_ENVIRONMENT_URL }}
    #     APP_SECRET_ENVIRONMENT_NAME: ${{ secrets.APP_SECRET_ENVIRONMENT_NAME }}
    #     APP_SECRET_EMAIL_HOST: ${{ secrets.APP_SECRET_EMAIL_HOST }}
    #     APP_SECRET_EMAIL_PORT: ${{ secrets.APP_SECRET_EMAIL_PORT }}
    #     APP_SECRET_EMAIL_USER: ${{ secrets.APP_SECRET_EMAIL_USER }}
    #     APP_SECRET_EMAIL_PASSWORD: ${{ secrets.APP_SECRET_EMAIL_PASSWORD }}
    #     APP_SECRET_EMAIL_REPLY_TO: ${{ secrets.APP_SECRET_EMAIL_REPLY_TO }}

    # - name: Dump ENV Vars
    #   run: cat ./app/app-secrets.yaml

    # - name: kubectl debug
    #   run: kubectl cluster-info
